const Expense = require('../models/expenseModel');
const { body, param, validationResult } = require('express-validator');

exports.getExpenses = [
    async (req, res) => {
      const expenses = Expense.findByUserId(req.user.id);
      res.json(expenses);
    },
  ];

  exports.createExpense = [
    body('amount').isFloat({ min: 0 }).toFloat(),
    body('category').notEmpty().trim(),
    body('date').isISO8601().toDate(),
    body('description').notEmpty().trim(),
    body('recurring').isBoolean().toBoolean(),
    async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
  
      const { amount, category, date, description, recurring } = req.body;
      const receipt = req.file ? `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}` : null;
      const newExpense = {
        userId: req.user.id,
        amount,
        category,
        date,
        description,
        receipt,
        recurring,
      };
      const createdExpense = Expense.create(newExpense);
      res.status(201).json(createdExpense);
    },
  ];

  exports.updateExpense = [
    param('id').isInt(),
    body('amount').optional().isFloat({ min: 0 }).toFloat(),
    body('category').optional().notEmpty().trim(),
    body('date').optional().isISO8601().toDate(),
    body('description').optional().notEmpty().trim(),
    body('recurring').optional().isBoolean().toBoolean(),
    async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
  
      const id = parseInt(req.params.id);
      const updates = {
        amount: req.body.amount,
        category: req.body.category,
        date: req.body.date,
        description: req.body.description,
        recurring: req.body.recurring,
        receipt: req.file ? `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}` : undefined,
      };
      const expense = Expense.update(id, updates);
      if (!expense) {
        return res.status(404).json({ message: 'Expense not found' });
      }
      res.json(expense);
    },
  ];


exports.deleteExpense = [
  param('id').isInt(),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const id = parseInt(req.params.id);
    Expense.delete(id);
    res.status(204).send();
  },
];